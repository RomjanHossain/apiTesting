{"version":3,"sources":["components/searchBox/search.components.jsx","components/card/card.components.jsx","components/card-list/card-list.components.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleSearch","type","className","onChange","Card","props","style","backgroundImage","uim","backgroundSize","user","location","country","city","email","phone","gender","dob","date","slice","name","first","last","href","CardList","sectionStyle","data","map","em","picture","large","App","e","setState","searchField","target","value","state","result","fetch","then","response","json","results","this","filterSearched","filter","names","toLowerCase","includes","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0SAGaA,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BAAOC,KAAK,OAAOC,UAAU,aAAaH,YAAaA,EAAaI,SAAUH,MCArEI,G,YAAM,SAACC,GAAD,OACf,yBAAKH,UAAU,OACX,yBAAKA,UAAU,cACH,yBAAKA,UAAU,QACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,gBAAgBI,MAAO,CAACC,gBAAgB,uFAAD,OAAwFF,EAAMG,IAA9F,KAAqGC,eAAgB,eAE3K,yBAAKP,UAAU,iBACX,4BACI,4BAAKG,EAAMK,KAAKC,SAASC,QAAS,KAAKP,EAAMK,KAAKC,SAASE,MAC/D,sCAAYR,EAAMK,KAAKI,OAC3B,sCAAYT,EAAMK,KAAKK,OACnB,uCAAaV,EAAMK,KAAKM,QAC5B,0CAAkBX,EAAMK,KAAKO,IAAIC,KAAMC,MAAM,EAAE,QAInD,yBAAKjB,UAAU,kDACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,mBAAb,QAGA,uBAAGA,UAAU,oBACRG,EAAMK,KAAKU,KAAKC,MAAO,IAAIhB,EAAMK,KAAKU,KAAKE,OAGpD,uBAAGC,KAAK,IAAIrB,UAAU,kBAAtB,uBC3BnBsB,EAAW,SAAAnB,GACpB,IAAIoB,EAAe,CACjBlB,gBAAgB,OAAD,OAASF,EAAMqB,KAAKC,KAAI,SAAAC,GAAE,OAAEA,EAAGC,QAAQC,SAAvC,MAEjB,OAAO,yBAAK5B,UAAU,yBACjBG,EAAMqB,KAAKC,KAAI,SAAAC,GAAE,OAAE,kBAAC,EAAD,CAAMtB,MAAOmB,EAAcf,KAAMkB,EAAIpB,IAAKoB,EAAGC,QAAQC,aC8BlEC,E,kDAjCX,aAAc,IAAD,8BACT,gBAaJ/B,aAAe,SAACgC,GACZ,EAAKC,SACD,CAAEC,YAAaF,EAAEG,OAAOC,SAd5B,EAAKC,MAAQ,CACTC,OAAQ,GACRJ,YAAY,IAJP,E,gEAQQ,IAAD,OAChBK,MAAM,0CACZC,MACU,SAAAC,GAAQ,OAAIA,EAASC,UACvBF,MAAK,SAAAG,GAAO,OAAG,EAAKV,SAAS,CAACK,OAAOK,EAAQA,e,+BAO1C,IAAD,EAC4BC,KAAKP,MAA7BC,EADJ,EACIA,OAAQJ,EADZ,EACYA,YACVW,EAAiBP,EAAOQ,QAAO,SAAAC,GAAK,OAAKA,EAAM3B,KAAKC,MAAM0B,EAAM3B,KAAKE,MAAM0B,cAAcC,SAASf,EAAYc,kBACpH,OACI,6BACI,2MAEA,kBAAC,EAAD,CAAWjD,YAAY,eAAeC,aAAc4C,KAAK5C,eACnE,kBAAC,EAAD,CAAU0B,KAAMmB,S,GA5BJK,IAAMC,WCOJC,QACW,cAA7BC,OAAO1C,SAAS2C,UAEe,UAA7BD,OAAO1C,SAAS2C,UAEhBD,OAAO1C,SAAS2C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.49d41478.chunk.js","sourcesContent":["import React from 'react';\nimport './search.style.css';\n\nexport const SearchBox = ({placeholder, handleSearch})=>(\n    <input type=\"text\" className=\"searchTerm\" placeholder={placeholder} onChange={handleSearch}\n/>\n)\n","import React from 'react';\nimport './card.style.css';\n\n\nexport const Card= (props) => (\n    <div className='row'>\n        <div className=\"col-1-of-3\">\n                    <div className=\"card\">\n                        <div className=\"card__side card__side--front\">\n                            <div className=\"card__picture\" style={{backgroundImage:`linear-gradient(to right bottom, rgba(111, 182, 204, 0.82), rgba(199,8,94,0.8)),url(${props.uim})`,backgroundSize: \"100% 100%\"}}>\n                            </div>\n                            <div className=\"card__details\">\n                                <ul>\n                                    <li>{props.user.location.country +', '+props.user.location.city}</li>\n                                <li>Email: {props.user.email}</li>\n                            <li>Phone: {props.user.phone}</li>\n                                <li>Gender: {props.user.gender}</li>\n                            <li>DOB &diams; {(props.user.dob.date).slice(0,10)}</li>\n                                </ul>\n                            </div>\n                        </div>\n                        <div className=\"card__side card__side--back card__side--back-1\">\n                            <div className=\"card__cta\">\n                                <div className=\"card__name-box\">\n                                    <p className=\"card__name-only\">\n                                        Name\n                                    </p>\n                                    <p className=\"card__name-value\">\n                                        {props.user.name.first +' '+props.user.name.last}\n                                    </p>\n                                </div>\n                                <a href=\"#\" className=\"btn btn--white\">View Profile</a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n    </div>\n)\n","import React from 'react';\nimport './card-list.style.css';\nimport {Card} from '../card/card.components';\n\nexport const CardList = props=>{\n    var sectionStyle = {\n      backgroundImage: `url(${props.data.map(em=>em.picture.large)})`\n    };\n    return <div className=\"card-list span-1-of-4\">\n        {props.data.map(em=><Card style={sectionStyle} user={em} uim={em.picture.large}/>)}\n    </div>\n}\n","import React from 'react';\nimport './index.css';\nimport {SearchBox} from './components/searchBox/search.components';\nimport {CardList} from './components/card-list/card-list.components';\n\nclass App extends React.Component{\n    constructor(){\n        super ();\n        this.state = {\n            result: [],\n            searchField:''\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://randomuser.me/api/?results=100\"\n).then(\n            response => response.json()\n        ).then(results=> this.setState({result:results.results}));\n    }\n    handleSearch = (e) => {\n        this.setState(\n            { searchField: e.target.value }\n        )\n    }\n    render(){\n        const { result, searchField } = this.state\n        const filterSearched = result.filter(names => (names.name.first+names.name.last).toLowerCase().includes(searchField.toLowerCase()))\n        return (\n            <div>\n                <h1>“모든 사람은 컴퓨터가 이해할 수있는 코드를 작성할 수 있습니다.</h1>\n                {\n                <SearchBox placeholder='search Names' handleSearch={this.handleSearch}/>\n    }{<CardList data={filterSearched}/>}\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}